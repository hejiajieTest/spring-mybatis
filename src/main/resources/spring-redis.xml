<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

	<!-- redis config start -->
	
	<!-- JedisPoolConfig配置 -->
     <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">    
        <property name="maxIdle" value="${redis.maxIdle}" />    
        <property name="maxTotal" value="${redis.maxTotal}" />    
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />    
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />    
    </bean>    
    
    <!-- 配置JedisConnectionFactory -->
    <bean id="jedisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--<property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
         <property name="password" value="${redis.pass}" /> -->
        <property name="database" value="${redis.dbIndex}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
        <constructor-arg name="clusterConfig" ref="redisClusterConfig" />
    </bean>
    <!-- Redis集群配置--> 
    <bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="3"></property>
        <property name="clusterNodes">
            <set>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6380"></constructor-arg>
                </bean>  
                
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6381"></constructor-arg>
                </bean>
                
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6382"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>
    <!-- 配置RedisTemplate -->
      <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" /> 
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer" >  
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />  
        </property>  
        <property name="hashKeySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>  
        <property name="hashValueSerializer">  
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>  
        </property>  
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>
    
     <!--自定义redis工具类,在需要缓存的地方注入此类RedisUtil-->  
    <bean id="redisUtil" class="cn.ffcs.tsp.util.RedisUtil">
    	<property name="redisTemplate" ref="redisTemplate" />
    </bean>

    <!-- 配置RedisCacheManager 
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate" />
        <property name="defaultExpiration" value="${redis.expiration}" />-->
        
    <!-- 配置RedisCacheConfig 
    <bean id="redisCacheConfig" class="com.ssm.utils.RedisCacheConfig">
        <constructor-arg ref="jedisConnectionFactory" />
        <constructor-arg ref="redisTemplate" />
        <constructor-arg ref="redisCacheManager" />
    </bean>-->
    <!-- redis config end -->
    
</beans>